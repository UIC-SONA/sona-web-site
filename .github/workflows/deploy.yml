name: CI/CD Next.js con PM2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Obtener el código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Instalar dependencias
      - name: Install dependencies
        run: npm ci

      # 4. Compilar Next.js
      - name: Build Next.js
        run: |
          echo "${{ secrets.NEXT_PROD_ENV }}" > .env.production
          npm run build

      # 5. Preparar y comprimir archivos para deploy
      - name: Prepare and compress deployment files
        run: |
          mkdir -p deploy
          cp -R .next package.json package-lock.json .env.production deploy/
          
          # Comprimir todo el directorio deploy
          tar -czf deploy.tar.gz -C deploy .
          
          # Mostrar info del archivo comprimido
          echo "Archivo comprimido creado:"
          ls -lh deploy.tar.gz

      # 6. Copiar archivo comprimido al servidor
      - name: Send compressed file to remote server
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

          # Crear directorio de destino
          ssh -i ~/.ssh/deploy_key $REMOTE_USER@$REMOTE_HOST "mkdir -p $REMOTE_PATH"

          # Transferir archivo comprimido
          scp -i ~/.ssh/deploy_key deploy.tar.gz $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/

      # 7. Descomprimir y desplegar con PM2 (Deployment Atómico)
      - name: Deploy with PM2 on remote server
        uses: appleboy/ssh-action@v1.1.0
        env:
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: REMOTE_PATH
          script: |
            cd $REMOTE_PATH
            echo "Iniciando proceso de deployment..."
            pwd

            # Crear timestamp para esta release
            RELEASE_DIR="release_$(date +%Y%m%d_%H%M%S)"
            echo "Preparando release: $RELEASE_DIR"

            # Crear directorio temporal para la nueva release
            mkdir -p $RELEASE_DIR
            
            # Descomprimir archivos EN EL DIRECTORIO TEMPORAL
            echo "Descomprimiendo archivos en $RELEASE_DIR..."
            tar -xzf deploy.tar.gz -C $RELEASE_DIR
            
            # Limpiar archivo comprimido
            rm deploy.tar.gz
            
            # Instalar dependencias en el directorio temporal
            echo "Instalando dependencias..."
            cd $RELEASE_DIR
            npm install --omit=dev
            
            # Volver al directorio padre
            cd $REMOTE_PATH

            # DETENER LA APP ANTES DE CAMBIAR ARCHIVOS
            echo "Deteniendo y eliminando aplicación anterior..."
            pm2 delete sona-site || true

            # Hacer backup de la versión actual (si existe)
            if [ -L "current" ]; then
              BACKUP_DIR=$(readlink current)
              echo "Respaldando release anterior: $BACKUP_DIR"
              ln -sfn $BACKUP_DIR previous || true
            fi

            # DEPLOYMENT ATÓMICO: cambiar el symlink
            echo "Activando nueva release..."
            ln -sfn $RELEASE_DIR current

            # Iniciar la app desde el symlink 'current'
            cd current
            echo "Iniciando aplicación con PM2..."
            pm2 start npm --name "sona-site" -- start -- -p 8001
            
            # Guardar configuración PM2
            pm2 save

            # Limpiar releases antiguas (mantener solo las últimas 2)
            # Mantener solo las 3 releases más recientes
            cd $REMOTE_PATH
            RELEASES_TO_KEEP=3
            ls -t | grep "^release_" | tail -n +$((RELEASES_TO_KEEP + 1)) | xargs -r rm -rf

            echo "--------------------------------------------------"
            echo "   ✅ Deployment completed successfully!"
            echo "   📁 Active release: $RELEASE_DIR"
            echo "   🔗 Symlink: current -> $RELEASE_DIR"
            echo "--------------------------------------------------"